{"ast":null,"code":"var _jsxFileName = \"/home/rahuls29/Documents/React-project/hooks_api/src/Effect.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n//UseEffect hook is used to make any manipulation on the page after when the render function works.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getData = () => {\n  //Retrieving the saved data from local storage.\n  const data = localStorage.getItem(\"count\");\n  if (data) return JSON.parse(data);else return 0;\n};\nfunction Effect() {\n  _s();\n  //Main function\n  const [cnt, setCnt] = useState(getData()); // counter using useState\n\n  useEffect(() => {\n    //Saving the value of count on local storage\n    localStorage.setItem(\"count\", JSON.stringify(cnt));\n  }, [cnt]); //[cnt] means that the effect will take place only when any event occurs on cnt.\n\n  useEffect(() => {\n    document.title = `Button clicked ${cnt} times`;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"    \", /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        padding: '1rem 2rem',\n        margin: '1rem auto'\n      },\n      on: () => {\n        setCnt(cnt + 1);\n      },\n      children: [\"Count \", cnt]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n_s(Effect, \"8znYIuf1UpMar3rRG/plmFoNUlc=\");\n_c = Effect;\nexport default Effect;\nvar _c;\n$RefreshReg$(_c, \"Effect\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","getData","data","localStorage","getItem","JSON","parse","Effect","_s","cnt","setCnt","setItem","stringify","document","title","children","style","padding","margin","on","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/rahuls29/Documents/React-project/hooks_api/src/Effect.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n//UseEffect hook is used to make any manipulation on the page after when the render function works.\n\nconst getData = () => {    //Retrieving the saved data from local storage.\n    const data = localStorage.getItem(\"count\");\n    if (data) return JSON.parse(data);\n    else return 0;\n}\n\nfunction Effect() {    //Main function\n    const [cnt, setCnt] = useState(getData());    // counter using useState\n\n    useEffect(() => {       //Saving the value of count on local storage\n        localStorage.setItem(\"count\", JSON.stringify(cnt));\n    }, [cnt])       //[cnt] means that the effect will take place only when any event occurs on cnt.\n\n    useEffect(() => {\n        document.title = `Button clicked ${cnt} times`\n    })\n    return (\n        <div>    {/* Inner styling of the HTML elements*/}\n            <button style={{ padding: '1rem 2rem', margin:'1rem auto'}} on={() => { setCnt(cnt + 1) }}>Count {cnt}</button>\n        </div>\n    )\n}\n\nexport default Effect;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAK;EACvB,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC1C,IAAIF,IAAI,EAAE,OAAOG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAAC,KAC7B,OAAO,CAAC;AACjB,CAAC;AAED,SAASK,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAAK;EACnB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGb,QAAQ,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAI;;EAE9CH,SAAS,CAAC,MAAM;IAAQ;IACpBK,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACO,SAAS,CAACH,GAAG,CAAC,CAAC;EACtD,CAAC,EAAE,CAACA,GAAG,CAAC,CAAC,EAAO;;EAEhBX,SAAS,CAAC,MAAM;IACZe,QAAQ,CAACC,KAAK,GAAI,kBAAiBL,GAAI,QAAO;EAClD,CAAC,CAAC;EACF,oBACIT,OAAA;IAAAe,QAAA,GAAK,MAAI,eACLf,OAAA;MAAQgB,KAAK,EAAE;QAAEC,OAAO,EAAE,WAAW;QAAEC,MAAM,EAAC;MAAW,CAAE;MAACC,EAAE,EAAEA,CAAA,KAAM;QAAET,MAAM,CAACD,GAAG,GAAG,CAAC,CAAC;MAAC,CAAE;MAAAM,QAAA,GAAC,QAAM,EAACN,GAAG;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9G,CAAC;AAEd;AAACf,EAAA,CAfQD,MAAM;AAAAiB,EAAA,GAANjB,MAAM;AAiBf,eAAeA,MAAM;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}