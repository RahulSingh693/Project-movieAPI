{"ast":null,"code":"import _slicedToArray from\"/home/rahuls29/Documents/React-project/hooks_api/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';//UseEffect hook is used to make any manipulation on the page after when the render function awakes.\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";var getData=function getData(){//Retrieving the saved data from local storage.\nvar data=localStorage.getItem(\"count\");if(data)return JSON.parse(data);else return 0;};function Effect(){//Main function\nvar _useState=useState(getData()),_useState2=_slicedToArray(_useState,2),cnt=_useState2[0],setCnt=_useState2[1];// counter using useState\nuseEffect(function(){//Saving the value of count on local storage\nlocalStorage.setItem(\"count\",JSON.stringify(cnt));},[cnt]);//[cnt] means that the effect will take place only when any event occurs on cnt.\nuseEffect(function(){document.title=\"Button clicked \".concat(cnt,\" times\");});return/*#__PURE__*/_jsxs(\"div\",{children:[\"    \",/*#__PURE__*/_jsxs(\"button\",{style:{padding:'1rem 2rem',margin:'1rem auto'},onClick:function onClick(){setCnt(cnt+1);},children:[\"Count \",cnt]})]});}export default Effect;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","getData","data","localStorage","getItem","JSON","parse","Effect","_useState","_useState2","_slicedToArray","cnt","setCnt","setItem","stringify","document","title","concat","children","style","padding","margin","onClick"],"sources":["/home/rahuls29/Documents/React-project/hooks_api/src/Effect.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n//UseEffect hook is used to make any manipulation on the page after when the render function awakes.\n\nconst getData = () => {    //Retrieving the saved data from local storage.\n    const data = localStorage.getItem(\"count\");\n    if (data) return JSON.parse(data);\n    else return 0;\n}\n\nfunction Effect() {    //Main function\n    const [cnt, setCnt] = useState(getData());    // counter using useState\n\n    useEffect(() => {       //Saving the value of count on local storage\n        localStorage.setItem(\"count\", JSON.stringify(cnt));\n    }, [cnt])       //[cnt] means that the effect will take place only when any event occurs on cnt.\n\n    useEffect(() => {\n        document.title = `Button clicked ${cnt} times`\n    })\n    return (\n        <div>    {/* Inner styling of the HTML elements*/}\n            <button style={{ padding: '1rem 2rem', margin:'1rem auto'}} onClick={() => { setCnt(cnt + 1) }}>Count {cnt}</button>\n        </div>\n    )\n}\n\nexport default Effect;  "],"mappings":"sIAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAElD;AAAA,OAAAC,IAAA,IAAAC,KAAA,yBAEA,GAAM,CAAAC,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAA,CAAS,CAAK;AACvB,GAAM,CAAAC,IAAI,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC1C,GAAIF,IAAI,CAAE,MAAO,CAAAG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAAC,IAC7B,OAAO,EAAC,CACjB,CAAC,CAED,QAAS,CAAAK,MAAMA,CAAA,CAAG,CAAK;AACnB,IAAAC,SAAA,CAAsBX,QAAQ,CAACI,OAAO,CAAC,CAAC,CAAC,CAAAQ,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAlCG,GAAG,CAAAF,UAAA,IAAEG,MAAM,CAAAH,UAAA,IAA4B;AAE9CX,SAAS,CAAC,UAAM,CAAQ;AACpBK,YAAY,CAACU,OAAO,CAAC,OAAO,CAAER,IAAI,CAACS,SAAS,CAACH,GAAG,CAAC,CAAC,CACtD,CAAC,CAAE,CAACA,GAAG,CAAC,CAAC,CAAO;AAEhBb,SAAS,CAAC,UAAM,CACZiB,QAAQ,CAACC,KAAK,mBAAAC,MAAA,CAAqBN,GAAG,UAAQ,CAClD,CAAC,CAAC,CACF,mBACIX,KAAA,QAAAkB,QAAA,EAAK,MAAI,cACLlB,KAAA,WAAQmB,KAAK,CAAE,CAAEC,OAAO,CAAE,WAAW,CAAEC,MAAM,CAAC,WAAW,CAAE,CAACC,OAAO,CAAE,SAAAA,QAAA,CAAM,CAAEV,MAAM,CAACD,GAAG,CAAG,CAAC,CAAC,CAAC,CAAE,CAAAO,QAAA,EAAC,QAAM,CAACP,GAAG,EAAS,CAAC,EACnH,CAAC,CAEd,CAEA,cAAe,CAAAJ,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}